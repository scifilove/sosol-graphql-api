type User {
  id: ID!
  publicAddress: String!
  nonce: String!
  handle: String!
  email: String
  consumerName: String
  avatar: String
  coverPhoto: String
  bio: String
  location: String
  website: String
  dob: String
  tweets: [Tweet!]!
  retweets: [Retweet!]!
  following: [User!]!
  followers: [User!]!
  comments: [Comment!]!
  reactions: [Reaction!]!
  files: [File!]!
  # computed fields
  isSelf: Boolean!
  isFollowing: Boolean!
  followingCount: Int!
  followersCount: Int!
  newMentionsCount: Int!
  tweetsCount: Int!
  # prisma does this
  createdAt: String
  updatedAt: String
}

type Tweet {
  id: ID!
  user: User
  text: String!
  tags: [String!]!
  gif: Gif
  nft: NFT
  files: [File!]!
  mentions: [String!]
  comments: [Comment!]!
  reactions: [Reaction!]!
  retweets: [Retweet!]!
  # computer fields
  commentsCount: Int!
  retweetsCount: Int!
  isTweetMine: Boolean!
  isRetweet: Boolean!
  # prisma does this
  createdAt: String
  updatedAt: String
}

type Comment {
  id: ID!
  text: String!
  tweet: Tweet
  user: User
  # computed fields
  isCommentMine: Boolean!
  # prisma does this
  createdAt: String
  updatedAt: String
}

type Reaction {
  id: ID!
  emojiId: String!
  skin: Int
  isMine: Boolean!
  count: Int!
  tweet: Tweet
  user: User
}

type File {
  id: ID!
  url: String!
  tweet: Tweet
  user: User
}

type Gif {
  id: ID!
  title: String!
  fixedHeightUrl: String!
  originalUrl: String!
  tweet: Tweet
}

input GifInput {
  title: String!
  fixedHeightUrl: String!
  originalUrl: String!
}

type Retweet {
  id: ID!
  tweet: Tweet
  user: User
  createdAt: String!
  updatedAt: String!
}

type NFT {
  id: ID!
  publicKey: String!
  name: String
  symbol: String
  description: String
  externalUrl: String
  sellerFeeBasisPoints: Int
  image: String!
  attributes: [AttributesEntity]
  collection: Collection
  properties: Properties
}

type AttributesEntity {
  traitType: String
  value: String
}

type Collection {
  name: String
  family: String
}

type Properties {
  files: [FilesEntity]
  category: String
  creators: [CreatorsEntity]
}

type FilesEntity {
  uri: String
  type: String
}

type CreatorsEntity {
  address: String
  share: Int
}

input NFTInput {
  publicKey: String!
  name: String
  symbol: String
  description: String
  externalUrl: String
  sellerFeeBasisPoints: Int
  image: String!
  attributes: [AttributesEntityInput]
  collection: CollectionInput
  properties: PropertiesInput
}

input AttributesEntityInput {
  traitType: String
  value: String
}

input CollectionInput {
  name: String
  family: String
}

input PropertiesInput {
  files: [FilesEntityInput]
  category: String
  creators: [CreatorsEntityInput]
}

input FilesEntityInput {
  uri: String
  type: String
}

input CreatorsEntityInput {
  address: String
  share: Int
}

type Nonce {
  hasPublicAddress: Boolean!
  user: User
}

type AuthPayload {
  token: String!
  user: User!
}
